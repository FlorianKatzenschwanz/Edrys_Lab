id: qK20vPcY5ZlOm1tn
createdBy: rC9RSsadcXJY
dateCreated: 1751547218666
name: STM Data via Audio
meta:
  logo: https://github.com/DM-3/lab-stm-adc-dma/blob/main/media/stm32f401re.jpg
  description: ''
  selfAssign: true
  defaultNumberOfRooms: 0
members:
  teacher: []
  student: []
modules:
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: |
        ## Using I2S to transfer Data
    studentConfig:
      content: ''
    teacherConfig:
      content: '## Welcome for Teachers'
    stationConfig:
      content: ''
    showInCustom: lobby
    width: full
    height: huge
  - url: https://edrys-labs.github.io/module-editor/index.html
    config:
      runCommand: execute
      language: cpp
      theme: light
      editorText: "#include \"main.h\"\n#include \"../lib/Init/Src/Inits.h\"\n\nint main(void)\n{\n\n  Initialize();   // this function initializes the chip an all communication protocols\n// Add your variables here\n\n  while (1)\n  {\n      // add code which should be run repeatedly here, do not add a delay\n\t  HAL_IWDG_Refresh(&hiwdg);     // Resets the counter for the Watchdog\n\t  }\n}\n\n/* The Error Handler gets called, when one of the communication interfaces could not be configured\n or some major error occurs during runtime*/\n\nvoid Error_Handler(void)  \n{\n  __disable_irq();    //Disable Interrupt\n  while (1)           //Wait forever\n  {\n  }\n}"
      synchronize: false
    showInCustom: station
    width: full
    height: medium
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        # Using Audio to transfer Data

        In this station the I2S Audioprotocol is used to transfer data from one
        STM32 to another one. The data is then automatically returned via
        CAN-Bus an printed in the serial monitor, at constant time intervals.


        ## CAN Bus

        A Can-Frame looks like this:


        ![CAN
        Frame](https://elearning.vector.com/pluginfile.php/123/mod_page/content/12/CAN_5.5_GRA_ErrorDetection_DE.png)

        - The SOF (Start of Frame) synchronizes all Nodes

        - The Identifier (11 bit) is the used to give each message a unique ID,
        it must not be 0

        - The DLC (Data Lenght Code) is used to tell all other Nodes on the bus
        how many Databyts will be transmitted

        - The Datafield contains 1-8 bytes of data


        In our case the other STM is configured so that we are able to change
        the ID of the Message, but it will always return the maximum of 8 bytes.


        ## I2S protocol

        The I2S protocol is configured in I2S Phillips at 16kHz and 16bit Data
        on 16 bit Data frames. Therefore the transmitted data should be stored
        in a `int16_t` array. Be aware, that the protocol is originally intened
        for the continous transmission of audio data und thus does not have any
        CRC checks.


        The other STM is configured to interpret the sucession of `0`, the
        maximum value for `int16_t`, `0`, minimum value for `int16_t` as SOF.

        This must directly be followed by the ID for the CAN message.

        Afterwards the 4 following values are weill be send back in the data
        field and each byte will be printed seperatly.


        To send the audio data you can use `HAL_I2S_Transmit(I2S_HandleTypeDef
        *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout);`.

        The STM32 is configured to use I2S1.



        ## Step 1: write the data structure to store the SOF, the ID and your
        data in

        ## Step 2: fill it with some test data

        ## Step 3: send the data via I2S and watch how it is returned

        ## Step 4: change your code so theat you can use each of the 8 bytes of
        the Datafield seperately
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: station
    width: full
    height: huge
  - url: https://edrys-labs.github.io/module-pyxtermjs/index.html
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: |-
        git clone https://github.com/FlorianKatzenschwanz/Edrys_Lab.git
        cd Edrys_Lab/Code/Datasender
        echo $CODE | base64 --decode > src/main.c
        pio run --target upload
        cd ../../..
        pio device monitor -b 9600
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: half
    height: tall
