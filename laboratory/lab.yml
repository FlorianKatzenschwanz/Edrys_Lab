id: E8bzTgY6FLo9EZ2T
createdBy: U1ksakEb0D1p
dateCreated: 1751547218666
name: STM Data via Audio
meta:
  logo: https://github.com/DM-3/lab-stm-adc-dma/blob/main/media/stm32f401re.jpg
  description: ''
  selfAssign: true
  defaultNumberOfRooms: 0
members:
  teacher: []
  student: []
modules:
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: |
        ## Using I2S to transfer Data
    studentConfig:
      content: ''
    teacherConfig:
      content: '## Welcome for Teachers'
    stationConfig:
      content: ''
    showInCustom: lobby
    width: full
    height: huge
  - url: https://edrys-labs.github.io/module-editor/index.html
    config:
      runCommand: execute
      language: cpp
      theme: light
      editorText: "/* USER CODE BEGIN Header */\n/**\n  ******************************************************************************\n  * @file           : main.c\n  * @brief          : Main program body\n  ******************************************************************************\n  * @attention\n  *\n  * Copyright (c) 2025 STMicroelectronics.\n  * All rights reserved.\n  *\n  * This software is licensed under terms that can be found in the LICENSE file\n  * in the root directory of this software component.\n  * If no LICENSE file comes with this software, it is provided AS-IS.\n  *\n  ******************************************************************************\n  */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\n\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\n\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\nCAN_HandleTypeDef hcan1;\n\nI2S_HandleTypeDef hi2s1;\n\nUART_HandleTypeDef huart3;\n\n/* USER CODE BEGIN PV */\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\nstatic void MX_GPIO_Init(void);\nstatic void MX_I2S1_Init(void);\nstatic void MX_USART3_UART_Init(void);\nstatic void MX_CAN1_Init(void);\n/* USER CODE BEGIN PFP */\n//UART_HandleTypeDef huart2;\n/* USER CODE END PFP */\n\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\n\tvolatile CAN_RxHeaderTypeDef RXHeader;\n\tvolatile uint8_t RXData[8];\n\tvolatile int canrecieved = 0;\n\n\tvoid HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {\n\t\t\tHAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RXHeader, RXData);\n\t\t\tcanrecieved = 1;\n\t\t}\n\n\n/* USER CODE END 0 */\n\n/**\n  * @brief  The application entry point.\n  * @retval int\n  */\nint main(void)\n{\n\n  /* USER CODE BEGIN 1 */\n\n  /* USER CODE END 1 */\n\n  /* MCU Configuration--------------------------------------------------------*/\n\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  HAL_Init();\n\n  /* USER CODE BEGIN Init */\n\n  /* USER CODE END Init */\n\n  /* Configure the system clock */\n  SystemClock_Config();\n\n  /* USER CODE BEGIN SysInit */\n\n  /* USER CODE END SysInit */\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_I2S1_Init();\n  MX_USART3_UART_Init();\n  MX_CAN1_Init();\n  /* USER CODE BEGIN 2 */\n\n\n  CAN_FilterTypeDef sFilterConfig;\n  sFilterConfig.FilterBank = 0;\n  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;\n  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;\n  sFilterConfig.FilterIdHigh = 0x0000;\n  sFilterConfig.FilterIdLow = 0x0000;\n  sFilterConfig.FilterMaskIdHigh = 0x0000;\n  sFilterConfig.FilterMaskIdLow = 0x0000;\n  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;\n  sFilterConfig.FilterActivation = ENABLE;\n  sFilterConfig.SlaveStartFilterBank = 14;\n\n  uint32_t TxMailbox;\n\n  uint8_t data[8] = {10};\n\n  HAL_StatusTypeDef res;\n  int16_t signal[10];\n  int nsamples = sizeof(signal) / sizeof(signal[0]);\n  signal[0] = 0;\n  signal[1] = 32767;\n  signal[2] = 0;\n  signal[3] = -32768;\n\n  uint16_t id = 0x600;\n  signal[4] = id;\n  signal[5] = 100;\n  signal[6] = 200;\n  signal[7] = 1000;\n  signal[8] = 20000;\n\n  volatile CAN_TxHeaderTypeDef AudioTX;\n    AudioTX.DLC = 8;\n    AudioTX.StdId = 0x10;\n    AudioTX.RTR = CAN_RTR_DATA;\n    AudioTX.IDE = CAN_ID_STD;\n\n    HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);\n    HAL_CAN_Start(&hcan1);\n    //HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO0_MSG_PENDING);\n    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);\n    //HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);\n\n\n\n  /*int i = 0;\n  while(i < nsamples){\n  \t\t  signal[i] = i;\n  \t\t  signal[i+1] = signal[i];\n  \t\t  i += 2;\n  \t  }*/\n  /* USER CODE END 2 */\n\n  /* Infinite loop */\n  /* USER CODE BEGIN WHILE */\n  while (1)\n  {\n\n\t  uint8_t data[2] = {0};\n\t  res = HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, 1000);\n\t  if(res != HAL_OK) {\n\t  \t\t\t  break;\n\t  \t\t  }\n\t  //HAL_CAN_AddTxMessage(&hcan2, &AudioTX, data, &TxMailbox);\n\n\t  if (canrecieved == 1){\n\t\t  \t  uint8_t buffer[100] = {'\\0'};\n\t\t  \t  sprintf(buffer, \"%d \\n\\r %d \\n\\r %d \\n\\r %d \\n\\r %d \\n\\r %d \\n\\r %d \\n\\r %d \\n \\n\\r\", RXData[0], RXData[1], RXData[2], RXData[3], RXData[4], RXData[5], RXData[6], RXData[7]);\n\t\t  \t  HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);\n\t\t  \t  canrecieved = 0;\n\t  }\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n  }\n  /* USER CODE END 3 */\n}\n\n/**\n  * @brief System Clock Configuration\n  * @retval None\n  */\nvoid SystemClock_Config(void)\n{\n  RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n\n  /** Macro to configure the PLL clock source\n  */\n  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);\n\n  /** Configure the main internal regulator output voltage\n  */\n  __HAL_RCC_PWR_CLK_ENABLE();\n  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n  /** Initializes the RCC Oscillators according to the specified parameters\n  * in the RCC_OscInitTypeDef structure.\n  */\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  RCC_OscInitStruct.HSIState = RCC_HSI_ON;\n  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\n  {\n    Error_Handler();\n  }\n\n  /** Initializes the CPU, AHB and APB buses clocks\n  */\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;\n\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)\n  {\n    Error_Handler();\n  }\n}\n\n/**\n  * @brief CAN1 Initialization Function\n  * @param None\n  * @retval None\n  */\nstatic void MX_CAN1_Init(void)\n{\n\n  /* USER CODE BEGIN CAN1_Init 0 */\n\n  /* USER CODE END CAN1_Init 0 */\n\n  /* USER CODE BEGIN CAN1_Init 1 */\n\n  /* USER CODE END CAN1_Init 1 */\n  hcan1.Instance = CAN1;\n  hcan1.Init.Prescaler = 4;\n  hcan1.Init.Mode = CAN_MODE_NORMAL;\n  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;\n  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;\n  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;\n  hcan1.Init.TimeTriggeredMode = DISABLE;\n  hcan1.Init.AutoBusOff = DISABLE;\n  hcan1.Init.AutoWakeUp = DISABLE;\n  hcan1.Init.AutoRetransmission = DISABLE;\n  hcan1.Init.ReceiveFifoLocked = DISABLE;\n  hcan1.Init.TransmitFifoPriority = DISABLE;\n  if (HAL_CAN_Init(&hcan1) != HAL_OK)\n  {\n    Error_Handler();\n  }\n  /* USER CODE BEGIN CAN1_Init 2 */\n\n  /* USER CODE END CAN1_Init 2 */\n\n}\n\n/**\n  * @brief I2S1 Initialization Function\n  * @param None\n  * @retval None\n  */\nstatic void MX_I2S1_Init(void)\n{\n\n  /* USER CODE BEGIN I2S1_Init 0 */\n\n  /* USER CODE END I2S1_Init 0 */\n\n  /* USER CODE BEGIN I2S1_Init 1 */\n\n  /* USER CODE END I2S1_Init 1 */\n  hi2s1.Instance = SPI1;\n  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;\n  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;\n  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;\n  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;\n  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;\n  hi2s1.Init.CPOL = I2S_CPOL_LOW;\n  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;\n  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;\n  if (HAL_I2S_Init(&hi2s1) != HAL_OK)\n  {\n    Error_Handler();\n  }\n  /* USER CODE BEGIN I2S1_Init 2 */\n\n  /* USER CODE END I2S1_Init 2 */\n\n}\n\n/**\n  * @brief USART3 Initialization Function\n  * @param None\n  * @retval None\n  */\nstatic void MX_USART3_UART_Init(void)\n{\n\n  /* USER CODE BEGIN USART3_Init 0 */\n\n  /* USER CODE END USART3_Init 0 */\n\n  /* USER CODE BEGIN USART3_Init 1 */\n\n  /* USER CODE END USART3_Init 1 */\n  huart3.Instance = USART3;\n  huart3.Init.BaudRate = 9600;\n  huart3.Init.WordLength = UART_WORDLENGTH_8B;\n  huart3.Init.StopBits = UART_STOPBITS_1;\n  huart3.Init.Parity = UART_PARITY_NONE;\n  huart3.Init.Mode = UART_MODE_TX;\n  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;\n  huart3.Init.OverSampling = UART_OVERSAMPLING_16;\n  if (HAL_UART_Init(&huart3) != HAL_OK)\n  {\n    Error_Handler();\n  }\n  /* USER CODE BEGIN USART3_Init 2 */\n\n  /* USER CODE END USART3_Init 2 */\n\n}\n\n/**\n  * @brief GPIO Initialization Function\n  * @param None\n  * @retval None\n  */\nstatic void MX_GPIO_Init(void)\n{\n  GPIO_InitTypeDef GPIO_InitStruct = {0};\n/* USER CODE BEGIN MX_GPIO_Init_1 */\n/* USER CODE END MX_GPIO_Init_1 */\n\n  /* GPIO Ports Clock Enable */\n  __HAL_RCC_GPIOC_CLK_ENABLE();\n  __HAL_RCC_GPIOH_CLK_ENABLE();\n  __HAL_RCC_GPIOA_CLK_ENABLE();\n  __HAL_RCC_GPIOB_CLK_ENABLE();\n  __HAL_RCC_GPIOG_CLK_ENABLE();\n  __HAL_RCC_GPIOD_CLK_ENABLE();\n\n  /*Configure GPIO pin Output Level */\n  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);\n\n  /*Configure GPIO pin Output Level */\n  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);\n\n  /*Configure GPIO pin : USER_Btn_Pin */\n  GPIO_InitStruct.Pin = USER_Btn_Pin;\n  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);\n\n  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */\n  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;\n  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);\n\n  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */\n  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;\n  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);\n\n  /*Configure GPIO pin : USB_OverCurrent_Pin */\n  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;\n  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);\n\n  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */\n  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;\n  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;\n  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;\n  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);\n\n/* USER CODE BEGIN MX_GPIO_Init_2 */\n/* USER CODE END MX_GPIO_Init_2 */\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n  * @brief  This function is executed in case of error occurrence.\n  * @retval None\n  */\nvoid Error_Handler(void)\n{\n  /* USER CODE BEGIN Error_Handler_Debug */\n  /* User can add his own implementation to report the HAL error return state */\n  __disable_irq();\n  while (1)\n  {\n  }\n  /* USER CODE END Error_Handler_Debug */\n}\n\n#ifdef  USE_FULL_ASSERT\n/**\n  * @brief  Reports the name of the source file and the source line number\n  *         where the assert_param error has occurred.\n  * @param  file: pointer to the source file name\n  * @param  line: assert_param error line source number\n  * @retval None\n  */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n  /* USER CODE BEGIN 6 */\n  /* User can add his own implementation to report the file name and line number,\n     ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n  /* USER CODE END 6 */\n}\n#endif /* USE_FULL_ASSERT */\n"
      synchronize: false
    showInCustom: station
    width: full
    height: medium
  - url: https://edrys-labs.github.io/module-markdown-it/index.html
    config:
      content: >-
        ## Step 1: Run the code snippet

        ## Step 2: Watch the messages returned via CAN Bus

        to stop the Serial Monitor in the Terminal, you have to press Ctrl+C
        after clicking into it
    studentConfig:
      content: ''
    teacherConfig:
      content: ''
    stationConfig:
      content: ''
    showInCustom: station
    width: full
    height: huge
  - url: https://edrys-labs.github.io/module-station-stream/index.html
    stationConfig:
      video: true
      audio: false
    showInCustom: station
    width: half
    height: medium
  - url: https://edrys-labs.github.io/module-pyxtermjs/index.html
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: |-
        git clone https://github.com/FlorianKatzenschwanz/Edrys_Lab.git
        cd Edrys_Lab/Code
        echo $CODE | base64 --decode > src/main.c
        pio run --target upload
        cd..
        cd..
        pio device monitor -b 9600
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: half
    height: medium
